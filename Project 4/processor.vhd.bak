LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY processor IS
    PORT (
        clock : IN std_logic;
        reset : IN std_logic;

        inst_addr : OUT std_logic_vector(31 DOWNTO 0);
        inst_read : OUT std_logic;
        inst_readdata : IN std_logic_vector(31 DOWNTO 0)
        inst_waitrequest : IN std_logic;

        data_addr : OUT std_logic_vector(31 DOWNTO 0)
        data_read : OUT std_logic;
        data_readdata : IN std_logic_vector(31 DOWNTO 0)
        data_write : OUT std_logic;
        data_writedata : OUT std_logic_vector(31 DOWNTO 0)
        data_waitrequest : IN std_logic
    );
END processor;

ARCHITECTURE proc_arch OF processor IS

    TYPE t_register_bank IS ARRAY (31 DOWNTO 0) OF std_logic_vector(31 DOWNTO 0);
    TYPE t_fetch_state IS (IDLE, WAITING);
    TYPE t_operation IS (ADD, SUB, ADDI, MULT, DIV, SLT, SLTI, AND, OR, NOR, XOR, ANDI, ORI, XORI, MFHI, MFLO, LUI, SLL, SRL, SRA, LW, SW, BEQ, BNE, J, JR, JAL);

    SIGNAL register_bank : t_register_bank;

    SIGNAL fetch_stall : std_logic := '0';
    SIGNAL decode_stall : std_logic := '0';
    SIGNAL execute_stall : std_logic := '0';
    SIGNAL memory_stall : std_logic := '0';
    SIGNAL writeback_stall : std_logic := '0';
    --for fetching
    SIGNAL program_counter : std_logic_vector(31 DOWNTO 0);
    SIGNAL instruction_register : std_logic_vector(31 DOWNTO 0);

    SIGNAL fetch_complete : std_logic := '0';
    SIGNAL fetch_state : t_fetch_state := IDLE;
    SIGNAL if_id_instruction : std_logic_vector(31 DOWNTO 0);
    SIGNAL if_id_programcounter : std_logic_vector(31 DOWNTO 0);

    --for decoding
    SIGNAL id_ex_pc : std_logic_vector(31 DOWNTO 0);
    SIGNAL id_ex_register_s : std_logic_vector(31 DOWNTO 0);
    SIGNAL id_ex_register_t : std_logic_vector(31 DOWNTO 0);
    SIGNAL id_ex_register_d : std_logic_vector(31 DOWNTO 0);
    SIGNAL id_ex_opcode : std_logic_vector(5 DOWNTO 0);
    SIGNAL id_ex_immediate : std_logic_vector(31 DOWNTO 0);
    SIGNAL id_ex_jaddress : std_logic_vector(25 DOWNTO 0);
    SIGNAL id_ex_shamt : std_logic_vector(4 DOWNTO 0);
    SIGNAL id_ex_funct: std_logic_vector(5 DOWNTO 0);
    SIGNAL id_ex_forwardex: std_logic_vector(1 downto 0);
    
    SIGNAL id_ex_operation : t_operation;

    --for execute
    SIGNAL ex_mem_operation : t_operation;
    SIGNAL ex_mem_aluresult : std_logic_vector(31 DOWNTO 0);
    

    --for memory
    SIGNAL mem_wb_operation : t_operation;
    
BEGIN

    register_bank(0) <= (OTHERS => '0');

    fetch_process : PROCESS (clock)
    BEGIN
        IF (rising_edge(clock)) THEN
            IF (reset = '1') THEN
                program_counter <= (OTHERS => '0');
                instruction_register <= (OTHERS => '0');
            ELSE
                CASE fetch_state IS
                    WHEN IDLE =>
                        inst_addr <= program_counter;
                        inst_read <= '1';
                        fetch_complete <= '0';
                        fetch_state <= WAITING;
                    WHEN WAITING =>
                        IF (inst_waitrequest = '0') THEN
                            if_id_instruction <= inst_readdata;
                            fetch_complete <= '1';
                            fetch_state <= IDLE;
                        END IF;
                END CASE;
            END IF;
        END IF;
    END PROCESS;
    
    decode_process : PROCESS (clock)
    variable id_regwriteback_ex: Integer 0 to 31;
    variable id_regwriteback_mem: Integer 0 to 31;
    --variable id_regwriteback_ex: Integer 0 to 31;
    BEGIN
        IF (rising_edge(clock)) THEN 
            id_ex_pc<=program_counter;
            

            id_ex_opcode<=instruction_register(31 downto 26);
            id_ex_register_s<=register_bank(to_integer(unsigned(instruction_register(25 downto 21))));
            id_ex_register_t<=register_bank(to_integer(unsigned(instruction_register(20 downto 16))));
            id_ex_register_d<=register_bank(to_integer(unsigned(instruction_register(15 downto 11))));

            id_ex_shamt<=instruction_register(10 downto 6);
            id_ex_funct<=instruction_register(5 downto 0);

            id_ex_immediate<=("0000000000000000", instruction_register(15 downto 0));
            id_ex_jaddress<=instruction_register(25 downto 0);

            --forwarding
            if(to_integer(unsigned(instruction_register(25 downto 21)))=id_regwriteback_ex) then
                id_ex_forwardex<="01";
            elsif (to_integer(unsigned(instruction_register(20 downto 16)))=id_regwriteback_ex) then
                id_ex_forwardex<="11";
            else
                id_ex_forwardex<="00";
            end if;

            id_regwriteback_mem:=id_regwriteback_ex;
            id_regwriteback_ex:=to_integer(unsigned(instruction_register(15 downto 11)));

            
        end if;
        
        
        

    END PROCESS;

    execute_process : PROCESS (clock)
    BEGIN
        IF (rising_edge(clock)) THEN 
            CASE id_ex_opcode IS
            WHEN "000000" =>
                CASE id_ex_funct IS
                WHEN "000000" => -- sll
                    
                WHEN "000010" => -- srl
                WHEN "000011" => -- sra
                WHEN "001000" => -- jr
                WHEN "010000" => -- mfhi
                WHEN "010010" => -- mflo
                WHEN "011000" => -- mult
                WHEN "011010" => -- div
                WHEN "100000" => -- add
                WHEN "100010" => -- sub
                WHEN "100100" => -- and
                WHEN "100101" => -- or
                WHEN "100110" => -- xor
                WHEN "100111" => -- nor
                WHEN "101010" => -- slt
                END CASE;
            WHEN "000010" => -- j
            WHEN "000011" => -- jal
            WHEN "000100" => -- beq
            WHEN "000101" => -- bne
            WHEN "001000" => -- addi
            WHEN "001010" => -- slti
            WHEN "001100" => -- andi
            WHEN "001101" => -- ori
            WHEN "001110" => -- xori
            WHEN "001111" => -- lui
            WHEN "100011" => -- lw
            WHEN "101011" => -- sw

            END CASE;
        END IF;
    END PROCESS;

    memory_process : PROCESS (clock)
    BEGIN

    END PROCESS;

    writeback_process : PROCESS (clock)
    BEGIN

    END PROCESS;
END proc_arch;